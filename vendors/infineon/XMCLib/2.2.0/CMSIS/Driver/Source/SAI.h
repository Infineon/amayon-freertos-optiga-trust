/*
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.                        
 *                                             
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *                                                                              
 * To improve the quality of the software, users are encouraged to share 
 * modifications, enhancements or bug fixes with Infineon Technologies AG 
 * at XMCSupport@infineon.com.
 *
 */

/**
 * @file SAI.h
 * @date 19 Nov., 2020
 * @version 1.2
 *
 * @brief SAI CMSIS Driver for Infineon XMC devices
 *
 * History
 *
 * Version 1.0 Initial version<br>
 * Version 1.1 Added interrupt priority
 * Version 1.2 Fixed compiler warnings
 */

#include "xmc_scu.h"
#include "xmc_gpio.h"
#include "xmc_i2s.h"

#include "Driver_SAI.h"
#include "RTE_Components.h"
#include "RTE_Device.h"

// I2S flags
#define I2S_INITIALIZED     (      1U)
#define I2S_POWERED         (1U << 1U)
#define I2S_CONFIGURED      (1U << 2U)

#if (UC_SERIES == XMC14)
void IRQ9_Handler(void);
void IRQ10_Handler(void);
void IRQ11_Handler(void);
void IRQ12_Handler(void);

/*!< USIC0 SR0 Interrupt */
#define  USIC0_0_IRQn      9U
#define  I2S0_ISR          IRQ9_Handler

/*!< USIC0 SR1 Interrupt */
#define  USIC0_1_IRQn      10U
#define  I2S1_ISR          IRQ10_Handler

/*!< USIC0 SR2 Interrupt */
#define  USIC1_0_IRQn      11U
#define  I2S2_ISR          IRQ11_Handler

/*!< USIC0 SR3 Interrupt */
#define  USIC1_1_IRQn      12U
#define  I2S3_ISR          IRQ12_Handler

#else

void USIC0_0_IRQHandler(void);
void USIC0_1_IRQHandler(void);
void USIC1_0_IRQHandler(void);
void USIC1_1_IRQHandler(void);
void USIC2_0_IRQHandler(void);
void USIC2_1_IRQHandler(void);

#define I2S0_ISR USIC0_0_IRQHandler
#define I2S1_ISR USIC0_1_IRQHandler
#define I2S2_ISR USIC1_0_IRQHandler
#define I2S3_ISR USIC1_1_IRQHandler
#define I2S4_ISR USIC2_0_IRQHandler
#define I2S5_ISR USIC2_1_IRQHandler

#endif

// GPIO
typedef struct XMC_GPIO 
{
  XMC_GPIO_PORT_t *const port;
  const uint8_t pin;
} XMC_GPIO_t;

// I2S transfer related information (Run-Time)
typedef struct _I2S_TRANSFER_INFO 
{
  uint32_t         tx_num;                         // Total number of data to be transmitted
  uint32_t         rx_num;                         // Total number of data to be received
  uint8_t         *tx_buf;                         // Pointer to out data buffer
  uint8_t         *rx_buf;                         // Pointer to in data buffer
  uint32_t         tx_cnt;                         // Number of transmitted data
  uint32_t         rx_cnt;                         // Number of received data
  uint8_t          data_bits;                      // Number of data bits
  uint8_t          master;                         // Master flag
  uint32_t         baudrate;                       // Baudrate value
  uint8_t          mono_mode;                      // Mono mode
} I2S_TRANSFER_INFO;

// Run-time I2S information
typedef struct _I2S_INFO
{
  ARM_SAI_SignalEvent_t     cb_event;                       // Event callback
  ARM_SAI_STATUS            status;                         // Status flags
  uint32_t                  tx_fifo_pointer;                // FIFO TX pointer
  uint32_t                  rx_fifo_pointer;                // FIFO RX pointer
  I2S_TRANSFER_INFO         xfer;                           // Transfer (transmit/receive) information
  uint32_t                  mode;                           // I2S mode
  uint8_t                   flags;                          // I2S driver flags (node dependent)
} I2S_INFO;

// I2S resources definitions
typedef struct 
{
  XMC_GPIO_t                sd_tx_port;                     // SD TX pin identifier
  uint32_t                  sd_tx_alternate_function;       // SD TX pin alternate function
  XMC_GPIO_t                sd_rx_port;                     // SD RX pin identifier
  uint8_t                   sd_rx_input;                    // SD RX pin input configuration
  XMC_GPIO_t                clk_output_port;                // CLK OUTPUT pin identifier
  uint32_t                  clk_output_alternate_function;  // CLK OUTPUT pin alternate function
  XMC_GPIO_t                clk_input_port;                 // CLK INPUT pin identifier
  uint8_t                   clk_input_input;                // CLK INPUT pin input configuration
  XMC_GPIO_t                ws_output_port;                 // Word select OUTPUT pin identifier
  uint32_t                  ws_output_alternate_function;   // Word select OUTPUT pin alternate function
  XMC_GPIO_t                ws_input_port;                  // Word select INPUT pin identifier
  uint8_t                   ws_input_input;                 // Word select INPUT pin input configuration
  XMC_GPIO_t                mclk_output_port;               // MCLK (Master Clock) OUTPUT pin identifier
  uint32_t                  mclk_output_alternate_function; // MCLK (Master Clock) OUTPUT pin alternate function
  IRQn_Type                 irq_num;                        // I2S transmit IRQ Number
  uint32_t                  irq_priority;                   // I2S IRQ priority
  uint32_t                  tx_fifo_size_num;               // FIFO TX size register num
  uint32_t                  tx_fifo_size_reg;               // FIFO TX size register
  uint32_t                  rx_fifo_size_num;               // FIFO RX size register num
  uint32_t                  rx_fifo_size_reg;               // FIFO RX size register
  uint8_t                   mute_mode_enabled;              // Mute mode selected
  volatile I2S_INFO        *info;                           // Pointer to run-time information
  XMC_USIC_CH_t            *i2s;                            // Pointer to I2S peripheral
} const I2S_RESOURCES;

#if (RTE_I2S0 != 0)
extern void I2S0_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI0;
#endif

#if (RTE_I2S1 != 0)
extern void I2S1_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI1;
#endif

#if (RTE_I2S2 != 0)
extern void I2S2_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI2;
#endif

#if (RTE_I2S3 != 0)
extern void I2S3_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI3;
#endif

#if (RTE_I2S4 != 0)
extern void I2S4_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI4;
#endif

#if (RTE_I2S5 != 0)
extern void I2S5_ISR(void);
extern ARM_DRIVER_SAI Driver_SAI5;
#endif
